<?xml version="1.0" encoding="UTF-8" ?>
<messages>
  <message id="formwidgets-intro">
    <h1>Form widgets</h1>

    <p>
      Form widgets implement controls for the user to enter data.
    </p>

    <p>
      The form widgets listed here are the native widgets
      offered by JWt.
    </p>
  </message>

  <message id="dialogs-intro">
    <h1>JWt Dialog Widgets</h1>
    
    <p>
      JWt supports modal and non-modal dialogs. There are four classes
      involved in dialogs:
      <dl>
        <dt><tt>WDialog</tt></dt>
	<dd>
	  a widget that displays contents within a window drawn on
	  top of the screen. Any widget can be inserted in a dialog.
	</dd>
        <dt><tt>WMessageBox</tt></dt>
	<dd>
	  a dialog that contains only a single line of text and some
	  configurable buttons. It is convenient to use this class if
	  you only have to display a simple message.
        </dd>
      </dl>
    </p>
    <p>
      Dialogs can be used in two ways. The traditional method,
      borrowed from desktop GUI toolkits, involves calling
      <tt>exec()</tt> (this approach requires a Servlet 3.0 container). 
      This starts a local event loop which returns
      when the dialog is closed. While this method is convenient and
      familiar, it usually does not scale for web applications, as
      every session displaying a dialog keeps a thread occupied for an
      extended period of time.  The
      scalable alternative to the local event loop is not to invoke is
      to simply <tt>show()</tt> the dialog similar to what you would
      do with any other widget, and delete when the
      <tt>finished()</tt> signal is triggered.
    </p>
  </message>
  
	<message id="formwidgets-WCheckBox">
    <p>
      A <tt>WCheckBox</tt> corresponds to an HTML <tt>&lt;input
      type="checkbox"&gt;</tt> element.
    </p>
    <p>
      Next to being checked or unchecked, a checkbox can be configured
      to allow a third state, <tt>PartiallyChecked</tt>, which can
      be used to indicate that it it isn't <i>entirely</i>
      checked. The third checkbox demonstrates this tristate behaviour
    </p>
  </message>
  
	<message id="style-and-layout-css">
    <h1>Cascading Style Sheets (CSS)</h1>

    <p>
      Using CSS, you can provide rules that specify both markup and
      layout properties of widgets. These rules are linked to certain
      widgets using <i>selectors</i>. Selectors may match widgets
      based on the style class or widget id of the widget or one of
      its ancestors.
    </p>

    <p>
      The important API methods and class for working with your
      application stylesheet are:
      <ul>
	<li>WApplication.useStyleSheet()</li>
	<li>WApplication.getStyleSheet() returns the internal stylesheet
	(an instance of WCssStyleSheet), which can be manipulated
	dynamically to add, modify or removing rules.</li>
	<li>WWidget.setStyleClass()</li>
	<li>WWidget.setId()</li>
      </ul>
    </p>

    <p>
      Most of the capabilities of CSS are also exposed in the WWidget
      API, and can thus be directly specified for a single
      widget. Properties that are related to layout can be specified
      using methods of WWidget, while properties that are decorative
      can be set in methods of WCssDecorationStyle, which can be
      accessed using WWidget.getDecorationStyle().
    </p>

  </message>
  
  <message id="mvc-stringlistviews">
    <p>
      <tt>WComboBox</tt> and <tt>WSelectionBox</tt> can either be filled by traditional
      <tt>insertItem()</tt> calls, or by making a reference to a
      model.  The three examples below are three views on the same
      model. Type a
      new item in the text field of the combobox, press the button,
      and watch how the new item also becomes available in the
      <tt>WComboBox</tt> and the <tt>WSelectionBox</tt> without
      writing a single line of code.
    </p>
  </message>
  
  <message id="basics-WTable-more">
    <p>
      While flexible, in many cases JWt provides more specialized
      widgets to deal with certain uses of <tt>WTable</tt>.
    </p>

    <p>
      If you want to create a tabular layout you should consider the
      <a
      href="#/style-and-layout/wgridlayout"><tt>WGridLayout</tt></a>
      layout class instead. If you wish to present a lot of data in a
      table, you can also use one of the Model-View-Classes (<a
      href="#/mvc-widgets/wtreeview"><tt>WTreeView</tt></a> or
      <a href="#/mvc-widgets/wtableview"><tt>WTableView</tt></a>), as
      these may offer a higher performance and other benefits such as
      controls for interactive column resizing and headers.
    </p>
  </message>
</messages>
